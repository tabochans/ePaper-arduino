
#ifndef EPAPER_HEADER_019
#define EPAPER_HEADER_019

#include "epd.h"
#include "buffer.h"

class ePaper {
  private:

  static const int DisplayWidth  = 296;
  static const int DisplayHeight = 128;

  static const unsigned char lut_full_2in9d[30];
  static const unsigned char lut_full_2in9dV2[76];
  static const unsigned char lut_vcomDC_2in9d[44];
  static const unsigned char lut_ww_2in9d[52];
  static const unsigned char lut_bw_2in9d[52];
  static const unsigned char lut_wb_2in9d[52];
  static const unsigned char lut_bb_2in9d[52];

  private:

  public:

  void Init_SPI() {
    return EPD_initSPI();
  }
  
  void Init_ePaper(){
    EPD_Reset();

    EPD_Send_5(0x01, 0x03, 0x00, 0x2b, 0x2b, 0x03);//POWER SETTING
    EPD_Send_3(0x06, 0x17, 0x17, 0x17);            //BOOSTER_SOFT_START
    EPD_SendCommand(0x04);                         //POWER_ON
    EPD_WaitUntilIdle();
    EPD_Send_2(0x00, 0xbf, 0x0d);                  //PANEL_SETTINGS: LUT from OTP£¬128x296
    EPD_Send_1(0x30, 0x3a);                        //PLL_SETTINGS: 3a 100HZ, 29 150Hz, 39 200HZ, 31 171HZ, 3c 50hz
    EPD_Send_3(0x61, 0x80, 0x01, 0x28);            //TCON_RESOLUTION
    EPD_Send_1(0x82, 0x28);                        //VCOM_DC_SETTINGS

    EPD_SendCommand(0x10);
    for (int j = 0; j < 298; j++) for (int i = 0; i < 16; i++) EPD_SendData(0x0);
    delay(10);

    EPD_SendCommand(0x13);
  }

  void LoadCheckerBoard(int checkSize){
    for(int i=0 ; i<DisplayWidth * DisplayHeight ; i+=8) {
      const int x = i / DisplayHeight ;
      const int y = i % DisplayHeight;
      
      const char value = (x / checkSize + y / checkSize) % 2 ? 0xff : 0;
      EPD_SendData((byte)value);
    }
  }
  
  void LoadImage(Buffer& buffer, int dataSizeByte) {
    while(!buffer.IsEmpty()) {
      uint8_t value = buffer.Read_Byte();
      EPD_SendData(value);
    }
  }
  
  void ShowImage(){
    // VCOM AND DATA INTERVAL SETTING
    // WBmode:VBDF 17, D7 VBDW 97, VBDB 57
    // WBRmode:VBDF F7, VBDW 77, VBDB 37, VBDR B7
    EPD_Send_1(0x50, 0x97);

    EPD_SendCommand(0x20);
    for(int count=0; count<44; count++) EPD_SendData(lut_vcomDC_2in9d[count]);
    
    EPD_SendCommand(0x21);
    for(int count=0; count<42; count++) EPD_SendData(lut_ww_2in9d[count]);

    EPD_SendCommand(0x22);
    for(int count=0; count<42; count++) EPD_SendData(lut_bw_2in9d[count]);
    
    EPD_SendCommand(0x23);
    for(int count=0; count<42; count++) EPD_SendData(lut_wb_2in9d[count]);
    
    EPD_SendCommand(0x24);
    for(int count=0; count<42; count++) EPD_SendData(lut_bb_2in9d[count]);

  
    delay(10);
    EPD_SendCommand(0x12);//DISPLAY REFRESH
    delay(100);     //!!!The delay here is necessary, 200uS at least!!!
    EPD_WaitUntilIdle(); 

    EPD_Send_1(0x50, 0xf7);
    EPD_SendCommand( 0x02);//POWER_OFF
    EPD_Send_1(0x07, 0xA5);//DEEP_SLEEP
  }
  
  ePaper(){}
};

  const unsigned char ePaper::lut_full_2in9d[30] = {
    0x22, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x11,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char ePaper::lut_full_2in9dV2[76] = {
    0x80,0x60,0x40,0x00,0x00,0x00,0x00,             //LUT0: BB:     VS 0 ~7
    0x10,0x60,0x20,0x00,0x00,0x00,0x00,             //LUT1: BW:     VS 0 ~7
    0x80,0x60,0x40,0x00,0x00,0x00,0x00,             //LUT2: WB:     VS 0 ~7
    0x10,0x60,0x20,0x00,0x00,0x00,0x00,             //LUT3: WW:     VS 0 ~7
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,             //LUT4: VCOM:   VS 0 ~7

    0x03,0x03,0x00,0x00,0x02,                       // TP0 A~D RP0
    0x09,0x09,0x00,0x00,0x02,                       // TP1 A~D RP1
    0x03,0x03,0x00,0x00,0x02,                       // TP2 A~D RP2
    0x00,0x00,0x00,0x00,0x00,                       // TP3 A~D RP3
    0x00,0x00,0x00,0x00,0x00,                       // TP4 A~D RP4
    0x00,0x00,0x00,0x00,0x00,                       // TP5 A~D RP5
    0x00,0x00,0x00,0x00,0x00,                       // TP6 A~D RP6

    0x15,0x41,0xA8,0x32,0x30,0x0A,
  };
  const unsigned char ePaper::lut_vcomDC_2in9d[44] = {
    0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x60, 0x28, 0x28, 0x00, 0x00,
    0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x12, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  };
  const unsigned char ePaper::lut_ww_2in9d[52] = {
    0x40, 0x08, 0x00, 0x00, 0x00, 0x02, 0x90, 0x28, 0x28, 0x00, 0x00, 0x01, 0x40, 0x14,
    0x00, 0x00, 0x00, 0x01, 0xA0, 0x12, 0x12, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char ePaper::lut_bw_2in9d[52] = {
    0x40, 0x17, 0x00, 0x00, 0x00, 0x02, 0x90, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x40, 0x0A,
    0x01, 0x00, 0x00, 0x01, 0xA0, 0x0E, 0x0E, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char ePaper::lut_wb_2in9d[52] = {
    0x80, 0x08, 0x00, 0x00, 0x00, 0x02, 0x90, 0x28, 0x28, 0x00, 0x00, 0x01, 0x80, 0x14,
    0x00, 0x00, 0x00, 0x01, 0x50, 0x12, 0x12, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char ePaper::lut_bb_2in9d[52] = {
    0x80, 0x08, 0x00, 0x00, 0x00, 0x02, 0x90, 0x28, 0x28, 0x00, 0x00, 0x01, 0x80, 0x14,
    0x00, 0x00, 0x00, 0x01, 0x50, 0x12, 0x12, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };


#endif
